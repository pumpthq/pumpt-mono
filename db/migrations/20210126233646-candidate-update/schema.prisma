// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
enum Role {
  CANDIDATE
  RECRUITER
  ADMIN
}

model User {
  id                String     @id @default(uuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  email             String     @unique
  hashedPassword    String?
  isApproved        Boolean    @default(false)
  isCompleted       Boolean    @default(false)
  isRejected        Boolean    @default(false)
  isFinished        Boolean    @default(false)
  restorePassToken  String     @default("")
  confirmEmailToken String     @default("")
  role              Role
  sessions          Session[]
  candidate         Candidate?
  recruiter         Recruiter?
  company           String?
  linkedInData      Json?
  emails            Email[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Candidate {
  id                   String     @id @default(uuid())
  updatedAt            DateTime   @updatedAt
  user                 User?      @relation(fields: [userId], references: [id])
  userId               String?
  firstName            String?
  lastName             String?
  active               Boolean    @default(true)
  employments          String[]
  recentJob            String?
  values               String[]
  recentWorkingAreas   Json?
  interestWorkingAreas String[]
  recentAreaExperience String?
  preferredCompanySize String?
  recentAnnualIncome   String?
  avatar               String     @default("")
  skills               String[]
  resumeId             String?
  resumeName           String?
  workingExperience    Json?
  interests            String[]
  highestDegree        String?
  education            Json?
  location             String?
  locationCoordinates  Json?
  abilityToRelocate    Boolean    @default(false)
  socialMedia          Json?
  isFilled             Boolean    @default(false)
  fillSteps            String[]
  fillProgress         Int        @default(0)
  matches              Matching[]
}

// REVISIT: Should a company only have one recruiter or the option to add more?
model Company {
  id                      String      @id @default(uuid())
  registeredAt            DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  name                    String      @unique
  type                    String[]
  foundDate               String
  employeesAmount         String
  recruiters              Recruiter[]
  headquartersLocation    String
  headquartersCoordinates Json?
  values                  String[]
  socialMedia             Json?
  officeLocations         Json?
  logo                    String?
  background              String?
  images                  String[]
  description             String?
  quoteOrMotto            String      @default("")
  isPremium               Boolean     @default(false)
  isFilled                Boolean     @default(false)
  fillSteps               String[]
  fillProgress            Int         @default(0)
  matches                 Matching[]
  vacancies               Vacancy[]
}

model Recruiter {
  id        String    @id @default(uuid())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId String?
  firstName String
  lastName  String
  avatar    String?
  position  String?
  vacancies Vacancy[]
}

model Email {
  id      String  @id @default(uuid())
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  type    String
  sent    Boolean @default(false)
  retries Int     @default(0)
  failed  Boolean @default(false)
}

model Keywords {
  id          String   @id @default(uuid())
  keywordList String[]
}

model Matching {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  candidate    Candidate? @relation(fields: [candidateId], references: [id])
  candidateId  String?
  company      Company?   @relation(fields: [companyId], references: [id])
  companyId    String?
  vacancy      Vacancy?   @relation(fields: [vacancyId], references: [id])
  vacancyId    String?
  pdfScore     Int        @default(0)
  score        Int        @default(0)
  breakdown    Json?
  isApproved   Boolean    @default(false)
  isBookmarked Boolean    @default(false)
}

model Vacancy {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  matching            Matching[]
  title               String
  industries          Json?
  salary              String?
  company             Company?   @relation(fields: [companyId], references: [id])
  companyId           String?
  recruiter           Recruiter? @relation(fields: [recruiterId], references: [id])
  recruiterId         String?
  experience          String?
  degree              String?
  employment          String[]
  description         String?
  location            String[]
  locationCoordinates Json?
  locations           Json?
  status              String?
  responsibilities    String[]
  requirements        String[]
  candidates          String[]
  publishedAt         DateTime   @default(now())
  closedAt            DateTime?
  closeFormResponse   String?
  keywords            String[]
}

model Conversation {
  id       String    @id @default(uuid())
  messages Message[]
}

model Message {
  id             String       @id @default(uuid())
  body           String
  sentBy         String
  createdAt      DateTime     @default(now())
  seen           Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}
